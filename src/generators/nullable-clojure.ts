import { Randomizer } from '../randomizer';
import { NullLikeValue } from './nullability';
import { ValueGenerator } from './base';
import { GenerationContext } from './context';

/**
 * This defines a callback-based ({@link ValueGenerator}) clojure for
 * deciding whether to return a {@link NullLikeValue} or to generate
 * a value by the given callback.
 *
 * @param {Randomizer} randomizer Randomizer to be used to generate a random number
 * @param {ValueGenerator} callback Callback generating a value
 * @param {number} probability Probability with which the value should be null-like
 * @param {unknown} nullLikeValue the callback's value or a {@link NullLikeValue}.
 *
 * @returns {ValueGenerator} New probabilistic value generator providing either
 * a {@link NullLikeValue} or a value generated by the given Value generator.
 *
 * @throws {Error} When the probability is not within a range of `[0, 1]`
 *
 * @template T Callback return value type
 */
export const nullabilityClojure = (
  randomizer: Randomizer,
  callback: ValueGenerator,
  probability: number,
  nullLikeValue?: unknown
): ValueGenerator => {

  if (!probability && probability !== 0) {
    throw new Error(`Probability is a required parameter for Nullability Clojure`);
  }

  if (probability > 1 || probability < 0) {
    throw new Error(
      `The probability must be within a range of [0, 1] (got ${probability})`,
    );
  }

  // Encapsulating function representing the probabilistic Value
  // generator deciding whether to generate a null-like value or
  // to use the given value generator
  return (context: GenerationContext) => {
    const actualProbability: number = randomizer();

    // Never null-like value
    if (probability === 0) return callback(context);

    // Always null-like value
    if (probability === 1) return nullLikeValue;

    // When higher probability of null-like value
    return probability > actualProbability ? nullLikeValue : callback(context);
  }
}
