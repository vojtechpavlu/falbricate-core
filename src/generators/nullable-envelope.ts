import { Randomizer } from '../randomizer';
import { NullabilityConfiguration, NullLikeValue } from './nullability';

type Callback<T> = () => T;

/**
 * This defines a callback-based envelope for deciding whether to return
 * a {@link NullLikeValue} or to generate a value by the given callback.
 *
 * @param {Randomizer} randomizer Randomizer to be used to generate a random number
 * @param {Callback} callback Callback generating a value
 * @param {NullabilityConfiguration} config Configuration deciding whether return
 * the callback's value or a {@link NullLikeValue}.
 *
 * @returns {T | NullLikeValue} Either {@link NullLikeValue} or a value
 * generated by the given callback.
 *
 * @template T Callback return value type
 */
export const NullableEnvelope = <T>(
  randomizer: Randomizer,
  callback: Callback<T>,
  config?: NullabilityConfiguration
): T | NullLikeValue => {
  if (config) {
    const value: NullLikeValue = config.value;
    const probability: number = config.probability;
    const actualProbability: number = randomizer();

    if (probability > 1 || probability < 0) {
      throw new Error(`The probability must be within a range of [0, 1] (got ${probability})`);
    }

    if (probability === 0) {
      // P(null) = 0 -> never null
      return callback();
    } else if (probability === 1) {
      // P(null) = 1 -> always null
      return value;
    } else {
      // When the randomly generated number is greater than the probability,
      // use the callback, otherwise the null-like value
      return actualProbability > probability ? callback() : value;
    }
  } else {
    // When the Nullability Configuration is not present
    return callback();
  }
};